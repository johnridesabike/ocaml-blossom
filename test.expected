# Trivial

Empty input graph
[]

Single edge
[(0, 1); (1, 0)]

Two edges
[(2, 3); (3, 2)]

Three edges
[(2, 3); (3, 2)]

Three edges again, with IDs ordered differently
[(2, 3); (3, 2)]

A simple love triangle
[(0, 2); (2, 0)]

Maximum cardinality
[(1, 2); (2, 1); (3, 4); (4, 3)]

Floating point weights
[(1, 4); (2, 3); (3, 2); (4, 1)]

# Negative weights

Negative weights
[(1, 2); (2, 1)]

Negative weights with maximum cardinality
[(1, 3); (2, 4); (3, 1); (4, 2)]

# Blossoms

S-blossom A
[(1, 2); (2, 1); (3, 4); (4, 3)]

S-blossom B
[(1, 6); (2, 3); (3, 2); (4, 5); (5, 4); (6, 1)]

Create nested S-blossom, use for augmentation.
[(1, 3); (2, 4); (3, 1); (4, 2); (5, 6); (6, 5)]

Create S-blossom, relabel as S, include in nested S-blossom.
[(1, 2); (2, 1); (3, 4); (4, 3); (5, 6); (6, 5); (7, 8); (8, 7)]

Create nested S-blossom, augment, expand recursively.
[(1, 2); (2, 1); (3, 5); (4, 6); (5, 3); (6, 4); (7, 8); (8, 7)]

Create S-blossom, relabel as T, expand.
[(1, 6); (2, 3); (3, 2); (4, 8); (5, 7); (6, 1); (7, 5); (8, 4)]

Create nested S-blossom, relabel as T, expand.
[(1, 8); (2, 3); (3, 2); (4, 7); (5, 6); (6, 5); (7, 4); (8, 1)]

Create nested S-blossom, relabel as S, expand recursively.
[
  (1, 2);
  (2, 1);
  (3, 5);
  (4, 9);
  (5, 3);
  (6, 7);
  (7, 6);
  (8, 10);
  (9, 4);
  (10, 8);
]

Again, but slightly different. (A)
[
  (1, 8);
  (2, 3);
  (3, 2);
  (4, 5);
  (5, 4);
  (6, 7);
  (7, 6);
  (8, 1);
  (10, 11);
  (11, 10);
]

Again, but slightly different. (B)
[
  (1, 2);
  (2, 1);
  (3, 6);
  (4, 9);
  (5, 7);
  (6, 3);
  (7, 5);
  (8, 10);
  (9, 4);
  (10, 8);
]

# S-blossom to T-blossom

S-blossom, relabel as T-blossom: A
[(1, 6); (2, 3); (3, 2); (4, 5); (5, 4); (6, 1)]

S-blossom, relabel as T-blossom: B
[(1, 6); (2, 3); (3, 2); (4, 5); (5, 4); (6, 1)]

S-blossom, relabel as T-blossom: C
[(1, 2); (2, 1); (3, 6); (4, 5); (5, 4); (6, 3)]

# Nasty cases

Create blossom, relabel as T in more than one way, expand, augment.
[
  (1, 6);
  (2, 3);
  (3, 2);
  (4, 8);
  (5, 7);
  (6, 1);
  (7, 5);
  (8, 4);
  (9, 10);
  (10, 9);
]

Again, but slightly different.
[
  (1, 6);
  (2, 3);
  (3, 2);
  (4, 8);
  (5, 7);
  (6, 1);
  (7, 5);
  (8, 4);
  (9, 10);
  (10, 9);
]

Create blossom, relabel as T, expand such that a new least-slack S-to-free
edge is produced, augment.
[
  (1, 6);
  (2, 3);
  (3, 2);
  (4, 8);
  (5, 7);
  (6, 1);
  (7, 5);
  (8, 4);
  (9, 10);
  (10, 9);
]

Create nested blossom, relabel as T in more than one way, expand outer
blossom such that inner blossom ends up on an augmenting path.
[
  (1, 8);
  (2, 3);
  (3, 2);
  (4, 6);
  (5, 9);
  (6, 4);
  (7, 10);
  (8, 1);
  (9, 5);
  (10, 7);
  (11, 12);
  (12, 11);
]

# More nasty cases.

Blossom with five children (A).
[
  (0, 1);
  (1, 0);
  (2, 5);
  (3, 4);
  (4, 3);
  (5, 2);
  (6, 7);
  (7, 6);
  (8, 9);
  (9, 8);
]

Blossom with five children (B).
[(1, 3); (2, 4); (3, 1); (4, 2); (5, 8); (7, 9); (8, 5); (9, 7)]

Scan along a long label path to create a blossom.
[
  (1, 2);
  (2, 1);
  (3, 6);
  (4, 5);
  (5, 4);
  (6, 3);
  (7, 8);
  (8, 7);
  (9, 10);
  (10, 9);
]

# Other tests

(Reversed) Create nested blossom, relabel as T in more than one way, expand
outer blossom such that inner blossom ends up on an augmenting path.
[
  (-12, -11);
  (-11, -12);
  (-10, -7);
  (-9, -5);
  (-8, -1);
  (-7, -10);
  (-6, -4);
  (-5, -9);
  (-4, -6);
  (-3, -2);
  (-2, -3);
  (-1, -8);
]

(Reversed) Create nested S-blossom, augment, expand recursively.
[(1, 2); (2, 1); (3, 5); (4, 6); (5, 3); (6, 4); (7, 8); (8, 7)]

Vertices with edges on themselves are silently ignored.
[(0, 1); (1, 0)]

String vertices
[
  ("Andrew", "Gabriel");
  ("Gabriel", "Andrew");
  ("James", "Paul");
  ("John", "Peter");
  ("Joseph", "Mary");
  ("Mary", "Joseph");
  ("Michael", "Raphael");
  ("Paul", "James");
  ("Peter", "John");
  ("Raphael", "Michael");
]

String vertices (nested S-blossom, relabel as S)
[
  ("Andrew", "Philip");
  ("James", "Mark");
  ("John", "Peter");
  ("Joseph", "Mary");
  ("Luke", "Matthew");
  ("Mark", "James");
  ("Mary", "Joseph");
  ("Matthew", "Luke");
  ("Peter", "John");
  ("Philip", "Andrew");
]

# Brute force

Generate a large number of random graphs and check that the algorithm doesn't
crash.

# Debugging

Print debug info. (Same as: Create nested S-blossom, relabel as T, expand.)
((STAGE 1)
 (mates ())
 (ASSIGN_LABEL (vertex 6) (in_blossom (Vertex 6)) S_single)
 (PUSH ((vertex 6)))
 (ASSIGN_LABEL (vertex 7) (in_blossom (Vertex 7)) S_single)
 (PUSH ((vertex 7)))
 (ASSIGN_LABEL (vertex 5) (in_blossom (Vertex 5)) S_single)
 (PUSH ((vertex 5)))
 (ASSIGN_LABEL (vertex 4) (in_blossom (Vertex 4)) S_single)
 (PUSH ((vertex 4)))
 (ASSIGN_LABEL (vertex 8) (in_blossom (Vertex 8)) S_single)
 (PUSH ((vertex 8)))
 (ASSIGN_LABEL (vertex 3) (in_blossom (Vertex 3)) S_single)
 (PUSH ((vertex 3)))
 (ASSIGN_LABEL (vertex 2) (in_blossom (Vertex 2)) S_single)
 (PUSH ((vertex 2)))
 (ASSIGN_LABEL (vertex 1) (in_blossom (Vertex 1)) S_single)
 (PUSH ((vertex 1)))
 (SUBSTAGE
  (POP (vertex 1))
  (POP (vertex 2))
  (POP (vertex 3))
  (POP (vertex 8))
  (POP (vertex 4))
  (POP (vertex 5))
  (POP (vertex 7))
  (POP (vertex 6))
  (DELTA (Three 12.5 ((i 3) (j 2) (weight 25)))))
 (SUBSTAGE
  (POP (vertex 3))
  (SCAN_FOR_BLOSSOM (v (vertex 3)) (w (vertex 2)))
  (AUGMENT_MATCHING (v (vertex 3)) (w (vertex 2)))
  (PAIR (i (vertex 3)) (j (vertex 2)))))
((STAGE 2)
 (mates ((2 (I ((i 3) (j 2) (weight 25)))) (3 (J ((i 3) (j 2) (weight 25))))))
 (ASSIGN_LABEL (vertex 6) (in_blossom (Vertex 6)) S_single)
 (PUSH ((vertex 6)))
 (ASSIGN_LABEL (vertex 7) (in_blossom (Vertex 7)) S_single)
 (PUSH ((vertex 7)))
 (ASSIGN_LABEL (vertex 5) (in_blossom (Vertex 5)) S_single)
 (PUSH ((vertex 5)))
 (ASSIGN_LABEL (vertex 4) (in_blossom (Vertex 4)) S_single)
 (PUSH ((vertex 4)))
 (ASSIGN_LABEL (vertex 8) (in_blossom (Vertex 8)) S_single)
 (PUSH ((vertex 8)))
 (ASSIGN_LABEL (vertex 1) (in_blossom (Vertex 1)) S_single)
 (PUSH ((vertex 1)))
 (SUBSTAGE
  (POP (vertex 1))
  (POP (vertex 8))
  (POP (vertex 4))
  (POP (vertex 5))
  (POP (vertex 7))
  (POP (vertex 6))
  (DELTA (Two 5 ((i 3) (j 1) (weight 20)))))
 (SUBSTAGE
  (POP (vertex 1))
  (ASSIGN_LABEL
   (vertex 3)
   (in_blossom (Vertex 3))
   (T (J ((i 3) (j 1) (weight 20)))))
  (ASSIGN_LABEL
   (vertex 2)
   (in_blossom (Vertex 2))
   (S (I ((i 3) (j 2) (weight 25)))))
  (PUSH ((vertex 2)))
  (POP (vertex 2))
  (DELTA (Three 0.5 ((i 2) (j 1) (weight 19)))))
 (SUBSTAGE
  (POP (vertex 2))
  (SCAN_FOR_BLOSSOM (v (vertex 2)) (w (vertex 1)))
  (ADD_BLOSSOM
   (base (Vertex 1))
   (v (vertex 2))
   (w (vertex 1))
   (children
    (((node (Vertex 1)) (endpoint (J ((i 3) (j 1) (weight 20)))))
     ((node (Vertex 3)) (endpoint (I ((i 3) (j 2) (weight 25)))))
     ((node (Vertex 2)) (endpoint (I ((i 2) (j 1) (weight 19))))))))
  (POP (vertex 3))
  (DELTA (Three 0.5 ((i 5) (j 4) (weight 13)))))
 (SUBSTAGE
  (POP (vertex 5))
  (SCAN_FOR_BLOSSOM (v (vertex 5)) (w (vertex 4)))
  (AUGMENT_MATCHING (v (vertex 5)) (w (vertex 4)))
  (PAIR (i (vertex 5)) (j (vertex 4)))))
((STAGE 3)
 (mates
  ((4 (I ((i 5) (j 4) (weight 13))))
   (5 (J ((i 5) (j 4) (weight 13))))
   (2 (I ((i 3) (j 2) (weight 25))))
   (3 (J ((i 3) (j 2) (weight 25))))))
 (ASSIGN_LABEL (vertex 6) (in_blossom (Vertex 6)) S_single)
 (PUSH ((vertex 6)))
 (ASSIGN_LABEL (vertex 7) (in_blossom (Vertex 7)) S_single)
 (PUSH ((vertex 7)))
 (ASSIGN_LABEL (vertex 8) (in_blossom (Vertex 8)) S_single)
 (PUSH ((vertex 8)))
 (ASSIGN_LABEL (vertex 1) (in_blossom (Blossom 0)) S_single)
 (PUSH ((vertex 2) (vertex 3) (vertex 1)))
 (SUBSTAGE
  (POP (vertex 2))
  (ASSIGN_LABEL
   (vertex 4)
   (in_blossom (Vertex 4))
   (T (J ((i 4) (j 2) (weight 18)))))
  (ASSIGN_LABEL
   (vertex 5)
   (in_blossom (Vertex 5))
   (S (J ((i 5) (j 4) (weight 13)))))
  (PUSH ((vertex 5)))
  (POP (vertex 5))
  (POP (vertex 3))
  (POP (vertex 1))
  (POP (vertex 8))
  (POP (vertex 7))
  (POP (vertex 6))
  (DELTA (Three 0.5 ((i 5) (j 3) (weight 18)))))
 (SUBSTAGE
  (POP (vertex 5))
  (SCAN_FOR_BLOSSOM (v (vertex 5)) (w (vertex 3)))
  (ADD_BLOSSOM
   (base (Blossom 0))
   (v (vertex 5))
   (w (vertex 3))
   (children
    (((node (Blossom 0)) (endpoint (J ((i 4) (j 2) (weight 18)))))
     ((node (Vertex 4)) (endpoint (J ((i 5) (j 4) (weight 13)))))
     ((node (Vertex 5)) (endpoint (I ((i 5) (j 3) (weight 18))))))))
  (POP (vertex 4))
  (DELTA (Three 2 ((i 8) (j 1) (weight 8)))))
 (SUBSTAGE
  (POP (vertex 8))
  (SCAN_FOR_BLOSSOM (v (vertex 8)) (w (vertex 1)))
  (AUGMENT_MATCHING (v (vertex 8)) (w (vertex 1)))
  (PAIR (i (vertex 8)) (j (vertex 1)))
  (AUGMENT_BLOSSOM
   (blossom 1)
   (vertex 1)
   (mates
    ((8 (J ((i 8) (j 1) (weight 8))))
     (4 (I ((i 5) (j 4) (weight 13))))
     (5 (J ((i 5) (j 4) (weight 13))))
     (2 (I ((i 3) (j 2) (weight 25))))
     (3 (J ((i 3) (j 2) (weight 25)))))))
  (AUGMENT_BLOSSOM
   (blossom 0)
   (vertex 1)
   (mates
    ((8 (J ((i 8) (j 1) (weight 8))))
     (4 (I ((i 5) (j 4) (weight 13))))
     (5 (J ((i 5) (j 4) (weight 13))))
     (2 (I ((i 3) (j 2) (weight 25))))
     (3 (J ((i 3) (j 2) (weight 25)))))))))
((STAGE 4)
 (mates
  ((1 (I ((i 8) (j 1) (weight 8))))
   (8 (J ((i 8) (j 1) (weight 8))))
   (4 (I ((i 5) (j 4) (weight 13))))
   (5 (J ((i 5) (j 4) (weight 13))))
   (2 (I ((i 3) (j 2) (weight 25))))
   (3 (J ((i 3) (j 2) (weight 25))))))
 (ASSIGN_LABEL (vertex 6) (in_blossom (Vertex 6)) S_single)
 (PUSH ((vertex 6)))
 (ASSIGN_LABEL (vertex 7) (in_blossom (Vertex 7)) S_single)
 (PUSH ((vertex 7)))
 (SUBSTAGE
  (POP (vertex 7))
  (POP (vertex 6))
  (DELTA (Two 1 ((i 6) (j 5) (weight 7)))))
 (SUBSTAGE
  (POP (vertex 6))
  (ASSIGN_LABEL
   (vertex 5)
   (in_blossom (Blossom 1))
   (T (I ((i 6) (j 5) (weight 7)))))
  (ASSIGN_LABEL
   (vertex 8)
   (in_blossom (Vertex 8))
   (S (J ((i 8) (j 1) (weight 8)))))
  (PUSH ((vertex 8)))
  (POP (vertex 8))
  (DELTA (Four 2 (blossom 1))))
 (EXPAND_BLOSSOM
  (blossom 1)
  Not_endstage
  (children
   (((node (Blossom 0)) (endpoint (J ((i 4) (j 2) (weight 18)))))
    ((node (Vertex 4)) (endpoint (J ((i 5) (j 4) (weight 13)))))
    ((node (Vertex 5)) (endpoint (I ((i 5) (j 3) (weight 18))))))))
 (ASSIGN_LABEL
  (vertex 5)
  (in_blossom (Vertex 5))
  (T (I ((i 6) (j 5) (weight 7)))))
 (ASSIGN_LABEL
  (vertex 4)
  (in_blossom (Vertex 4))
  (S (I ((i 5) (j 4) (weight 13)))))
 (PUSH ((vertex 4)))
 (SUBSTAGE (POP (vertex 4)) (DELTA (Three 0.5 ((i 7) (j 4) (weight 7)))))
 (SUBSTAGE
  (POP (vertex 7))
  (SCAN_FOR_BLOSSOM (v (vertex 7)) (w (vertex 4)))
  (AUGMENT_MATCHING (v (vertex 7)) (w (vertex 4)))
  (PAIR (i (vertex 7)) (j (vertex 4)))))
((STAGE 5)
 (mates
  ((6 (J ((i 6) (j 5) (weight 7))))
   (5 (I ((i 6) (j 5) (weight 7))))
   (4 (I ((i 7) (j 4) (weight 7))))
   (7 (J ((i 7) (j 4) (weight 7))))
   (1 (I ((i 8) (j 1) (weight 8))))
   (8 (J ((i 8) (j 1) (weight 8))))
   (4 (I ((i 5) (j 4) (weight 13))))
   (5 (J ((i 5) (j 4) (weight 13))))
   (2 (I ((i 3) (j 2) (weight 25))))
   (3 (J ((i 3) (j 2) (weight 25))))))
 (SUBSTAGE (DELTA (One 0.5))))
(RESULT (3 2) (2 3) (8 1) (1 8) (7 4) (4 7) (5 6) (6 5))
